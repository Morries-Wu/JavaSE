package Server;

import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

//熟悉SAX解析流程
public class XML_Test01 {
	public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException {
		// SAX解析
		// 1、获取解析工厂
		SAXParserFactory factory = SAXParserFactory.newInstance();
		// 2、从解析工厂获取解析器
		SAXParser parse = factory.newSAXParser();
		// 3、编写处理器
		// 4、加载文档Document注册器
		PHandler handler = new PHandler(); 
		// 5、解析
		parse.parse(Thread.currentThread().getContextClassLoader().getResourceAsStream("Web01.xml"), handler);
	}
}

class PHandler extends DefaultHandler {

	public void characters(char[] ch, int start, int length) throws SAXException {
		String contents = new String(ch, start, length).trim();
		if (contents.length() > 0) {
			System.out.println("内容为-->" + contents);
		}else {
			System.out.println("内容为-->" +"空");
		}

	}

	@Override
	public void startDocument() throws SAXException {
		System.out.println("--解析文档开始--");
	}

	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		System.out.println(qName + "-->解析开始");// qName表示标签或者元素名
	}

	public void endElement(String uri, String localName, String qName) throws SAXException {
		System.out.print(qName + "-->解析结束");// qName表示标签或者元素名
	}

	@Override
	public void endDocument() throws SAXException {
		System.out.println("--解析文档结束--");
	}

}