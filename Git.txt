配置个人的用户名称和电子邮件地址
$ git config --global user.name "Morries_Wu"
$ git config --global user.email 1802702683@qq.com
说明:
签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能看到
以此确认本次提交是谁做的。Git首次安装必须设置一下用户签名,否则无法提交代码。
注意:这里设置用户名签名和将来登录github(或其他代码托管中心)的账号没有任何关系

git config --list                查看配置信息
git init                         创建本地仓库
git status                       查看本地库状态
git add 文件                      添加暂存区
git commit -m "日志信息" 文件名     提交到本地库
git reflog                       查看历史记录

版本穿梭
git reset --hard "穿越版本号"

分支操作
git branch 分支名      创建分支
git branch -v         查看分支
git checkout 分支名    切换分支
git merge 分支名       把指定的分支合并到当前分支上

企业常见代码冲突合并
合并分支时,两个分支在同一个文件的同一个位置有两套完全不同的修改
git无法替我们决定使用哪一个。必须认为决定新代码内容

解决冲突
1、编辑有冲突的文件,删除特殊符号,决定要使用的内容
特殊符号:<<<<<<<HEAD 当前分支的代码 ======== 合并过来的代码 >>>>>>>>hot-fix
2、添加到暂存区
git add hello.txt
3、执行提交(注意:此时使用git commit 命令不能带文件名)
git commit -m "merge hot-fix"
发现后面MERGING消失,变为正常

GitHub操作
1、创建远程库
2、远程库操作
git remote -v                          查看当前所有远程地址别名
git remote add 别名 远程地址             起别名
git push 别名 分支                      推送本地分支上的内容到远程仓库
git clone 远程地址                      将远程仓库的内容克隆到本地
git pull 远程仓库地址别名 远程分支别名     将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并

SSH免密登录
1、运行命令生成.ssh密钥目录[注意:这里-C 这个参数是大写的C]
ssh -keygen -t rsa -C 1802702683@qq.com

注意:
push是将本地代码推送到远程库,如果本地库代码跟远程库代码版本不一致
push的操作会被拒绝的。也就是说,要想push成功,一定要保证本地库的版本要比远程库的版本高

